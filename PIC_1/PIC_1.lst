CCS PCM C Compiler, Version 5.015, 5967               18-Sep-21 22:05

               Filename:   C:\Users\WIN10\Desktop\PIC\ZZZ_demo\PIC_1\PIC_1.lst

               ROM used:   803 words (10%)
                           Largest free fragment is 2048
               RAM used:   14 (4%) at main() level
                           34 (9%) worst case
               Stack used: 6 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   2E1
0003:  NOP
.................... #include <16F877a.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA CE,23
000D:  DATA D5,2C
000E:  DATA 45,27
000F:  DATA A0,26
0010:  DATA 49,27
0011:  DATA 48,10
0012:  DATA 4B,24
0013:  DATA CF,20
0014:  DATA 00,00
*
021B:  MOVF   0B,W
021C:  MOVWF  28
021D:  BCF    0B.7
021E:  BSF    03.5
021F:  BSF    03.6
0220:  BSF    0C.7
0221:  BSF    0C.0
0222:  NOP
0223:  NOP
0224:  BCF    03.5
0225:  BCF    03.6
0226:  BTFSC  28.7
0227:  BSF    0B.7
0228:  BSF    03.6
0229:  MOVF   0C,W
022A:  ANDLW  7F
022B:  BTFSC  03.2
022C:  GOTO   26F
022D:  BCF    03.6
022E:  MOVWF  28
022F:  BSF    03.6
0230:  MOVF   0D,W
0231:  BCF    03.6
0232:  MOVWF  29
0233:  BSF    03.6
0234:  MOVF   0F,W
0235:  BCF    03.6
0236:  MOVWF  2A
0237:  MOVF   28,W
0238:  MOVWF  2E
0239:  CALL   1F6
023A:  MOVF   29,W
023B:  BSF    03.6
023C:  MOVWF  0D
023D:  BCF    03.6
023E:  MOVF   2A,W
023F:  BSF    03.6
0240:  MOVWF  0F
0241:  BCF    03.6
0242:  MOVF   0B,W
0243:  MOVWF  2B
0244:  BCF    0B.7
0245:  BSF    03.5
0246:  BSF    03.6
0247:  BSF    0C.7
0248:  BSF    0C.0
0249:  NOP
024A:  NOP
024B:  BCF    03.5
024C:  BCF    03.6
024D:  BTFSC  2B.7
024E:  BSF    0B.7
024F:  BSF    03.6
0250:  RLF    0C,W
0251:  RLF    0E,W
0252:  ANDLW  7F
0253:  BTFSC  03.2
0254:  GOTO   26F
0255:  BCF    03.6
0256:  MOVWF  28
0257:  BSF    03.6
0258:  MOVF   0D,W
0259:  BCF    03.6
025A:  MOVWF  29
025B:  BSF    03.6
025C:  MOVF   0F,W
025D:  BCF    03.6
025E:  MOVWF  2A
025F:  MOVF   28,W
0260:  MOVWF  2E
0261:  CALL   1F6
0262:  MOVF   29,W
0263:  BSF    03.6
0264:  MOVWF  0D
0265:  BCF    03.6
0266:  MOVF   2A,W
0267:  BSF    03.6
0268:  MOVWF  0F
0269:  INCF   0D,F
026A:  BTFSC  03.2
026B:  INCF   0F,F
026C:  BCF    03.6
026D:  GOTO   21B
026E:  BSF    03.6
026F:  BCF    03.6
0270:  BCF    0A.3
0271:  BCF    0A.4
0272:  GOTO   30E (RETURN)
0273:  MOVF   2F,W
0274:  CLRF   78
0275:  SUBWF  2E,W
0276:  BTFSC  03.0
0277:  GOTO   27B
0278:  MOVF   2E,W
0279:  MOVWF  77
027A:  GOTO   287
027B:  CLRF   77
027C:  MOVLW  08
027D:  MOVWF  30
027E:  RLF    2E,F
027F:  RLF    77,F
0280:  MOVF   2F,W
0281:  SUBWF  77,W
0282:  BTFSC  03.0
0283:  MOVWF  77
0284:  RLF    78,F
0285:  DECFSZ 30,F
0286:  GOTO   27E
0287:  RETURN
0288:  MOVLW  20
0289:  BTFSS  29.4
028A:  MOVLW  30
028B:  MOVWF  2A
028C:  MOVF   28,W
028D:  MOVWF  77
028E:  BTFSS  28.7
028F:  GOTO   298
0290:  COMF   77,F
0291:  INCF   77,F
0292:  MOVF   77,W
0293:  MOVWF  28
0294:  MOVLW  2D
0295:  MOVWF  2A
0296:  BSF    29.7
0297:  BSF    29.0
0298:  MOVF   28,W
0299:  MOVWF  2E
029A:  MOVLW  64
029B:  MOVWF  2F
029C:  CALL   273
029D:  MOVF   77,W
029E:  MOVWF  28
029F:  MOVLW  30
02A0:  ADDWF  78,W
02A1:  MOVWF  2B
02A2:  MOVF   28,W
02A3:  MOVWF  2E
02A4:  MOVLW  0A
02A5:  MOVWF  2F
02A6:  CALL   273
02A7:  MOVLW  30
02A8:  ADDWF  77,W
02A9:  MOVWF  2D
02AA:  MOVLW  30
02AB:  ADDWF  78,W
02AC:  MOVWF  2C
02AD:  MOVF   2A,W
02AE:  MOVWF  77
02AF:  MOVLW  30
02B0:  SUBWF  2B,W
02B1:  BTFSC  03.2
02B2:  GOTO   2B7
02B3:  BSF    29.1
02B4:  BTFSC  29.7
02B5:  BSF    29.2
02B6:  GOTO   2CB
02B7:  MOVF   2A,W
02B8:  MOVWF  2B
02B9:  MOVLW  20
02BA:  MOVWF  2A
02BB:  MOVLW  30
02BC:  SUBWF  2C,W
02BD:  BTFSC  03.2
02BE:  GOTO   2C3
02BF:  BSF    29.0
02C0:  BTFSC  29.7
02C1:  BSF    29.1
02C2:  GOTO   2CB
02C3:  BTFSS  03.2
02C4:  BSF    29.0
02C5:  BTFSS  03.2
02C6:  GOTO   2CB
02C7:  MOVF   2B,W
02C8:  MOVWF  2C
02C9:  MOVLW  20
02CA:  MOVWF  2B
02CB:  BTFSC  29.2
02CC:  GOTO   2D2
02CD:  BTFSC  29.1
02CE:  GOTO   2D5
02CF:  BTFSC  29.0
02D0:  GOTO   2D8
02D1:  GOTO   2DB
02D2:  MOVF   2A,W
02D3:  MOVWF  2E
02D4:  CALL   1F6
02D5:  MOVF   2B,W
02D6:  MOVWF  2E
02D7:  CALL   1F6
02D8:  MOVF   2C,W
02D9:  MOVWF  2E
02DA:  CALL   1F6
02DB:  MOVF   2D,W
02DC:  MOVWF  2E
02DD:  CALL   1F6
02DE:  BCF    0A.3
02DF:  BCF    0A.4
02E0:  GOTO   318 (RETURN)
....................  
.................... #list 
....................  
.................... #FUSES PUT,HS,NOWDT,NOPROTECT,NOLVP 
.................... #use delay(clock=20M) 
*
0015:  MOVLW  2F
0016:  MOVWF  04
0017:  BCF    03.7
0018:  MOVF   00,W
0019:  BTFSC  03.2
001A:  GOTO   028
001B:  MOVLW  06
001C:  MOVWF  78
001D:  CLRF   77
001E:  DECFSZ 77,F
001F:  GOTO   01E
0020:  DECFSZ 78,F
0021:  GOTO   01D
0022:  MOVLW  7B
0023:  MOVWF  77
0024:  DECFSZ 77,F
0025:  GOTO   024
0026:  DECFSZ 00,F
0027:  GOTO   01B
0028:  RETURN
.................... #use i2c(Master,Fast=100000, sda=PIN_C4, scl=PIN_C3,force_sw) 
0029:  MOVLW  08
002A:  MOVWF  78
002B:  MOVLW  04
002C:  MOVWF  77
002D:  DECFSZ 77,F
002E:  GOTO   02D
002F:  BCF    07.3
0030:  BCF    20.3
0031:  MOVF   20,W
0032:  BSF    03.5
0033:  MOVWF  07
0034:  MOVLW  03
0035:  MOVWF  77
0036:  DECFSZ 77,F
0037:  GOTO   036
0038:  BCF    03.5
0039:  RLF    3C,F
003A:  BCF    07.4
003B:  BTFSS  03.0
003C:  GOTO   043
003D:  BSF    20.4
003E:  MOVF   20,W
003F:  BSF    03.5
0040:  MOVWF  07
0041:  GOTO   047
0042:  BCF    03.5
0043:  BCF    20.4
0044:  MOVF   20,W
0045:  BSF    03.5
0046:  MOVWF  07
0047:  NOP
0048:  BCF    03.5
0049:  BSF    20.3
004A:  MOVF   20,W
004B:  BSF    03.5
004C:  MOVWF  07
004D:  BCF    03.5
004E:  BTFSS  07.3
004F:  GOTO   04E
0050:  DECFSZ 78,F
0051:  GOTO   02B
0052:  MOVLW  04
0053:  MOVWF  77
0054:  DECFSZ 77,F
0055:  GOTO   054
0056:  BCF    07.3
0057:  BCF    20.3
0058:  MOVF   20,W
0059:  BSF    03.5
005A:  MOVWF  07
005B:  NOP
005C:  BCF    03.5
005D:  BSF    20.4
005E:  MOVF   20,W
005F:  BSF    03.5
0060:  MOVWF  07
0061:  MOVLW  03
0062:  MOVWF  77
0063:  DECFSZ 77,F
0064:  GOTO   063
0065:  MOVLW  03
0066:  MOVWF  77
0067:  DECFSZ 77,F
0068:  GOTO   067
0069:  BCF    03.5
006A:  BSF    20.3
006B:  MOVF   20,W
006C:  BSF    03.5
006D:  MOVWF  07
006E:  BCF    03.5
006F:  BTFSS  07.3
0070:  GOTO   06F
0071:  CLRF   78
0072:  MOVLW  03
0073:  MOVWF  77
0074:  DECFSZ 77,F
0075:  GOTO   074
0076:  BTFSC  07.4
0077:  BSF    78.0
0078:  BCF    07.3
0079:  BCF    20.3
007A:  MOVF   20,W
007B:  BSF    03.5
007C:  MOVWF  07
007D:  BCF    03.5
007E:  BCF    07.4
007F:  BCF    20.4
0080:  MOVF   20,W
0081:  BSF    03.5
0082:  MOVWF  07
0083:  BCF    03.5
0084:  RETURN
.................... #include "i2c_Flex_LCD.c" 
.................... //-----------------------------------------------------------------------------  
.................... // Title:         i2c_Flex_LCD  
.................... // Description:   Driver for common LCD with 1/2/3 or 4 rows by 1...20 columns  
.................... //                using PCF8574T interface board with I2C protocol.  
.................... // Date:          Nov-2013  
.................... // Ver.Rev.:      1.1  
.................... // Author:        Hugo Silva (sergio-hugo@bol.com.br) #Based on the routines of  
.................... //                "20X4_LCD_I2C_DRIVER.h" from Pumrin S. and "lcd4_i2c.c" from XP8100  
.................... //-----------------------------------------------------------------------------  
.................... //  
.................... // lcd_init() Must be called before any other function.  
.................... //  
.................... // lcd_putc(c) Will display c on the next position of the LCD.  
.................... //   
.................... //     \f Clear LCD display  
.................... //     \n Set write position on next lcd line  
.................... //     \b LCD backspace  
.................... //     lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)  
.................... //  
.................... // lcd_backlight_led(ON)/lcd_backlight_led(OFF) = Turn ON/OFF LCD Backlight LED  
.................... //  
.................... //-----------------------------------------------------------------------------  
.................... // LCD pins D0-D3 are not used.  
.................... //-----------------------------------------------------------------------------  
.................... //  
.................... // Comment   : Control of a compatible LCD (1...4 rows by 1...4 columns) from  
.................... //              a bus I2C with an EXPANDER of I/O with connection I2C.  
.................... //              The tests of these routines have been programmed using the IC  
.................... //              Phillips PCF8574T. I've used 4 bits mode programming.  
.................... //              The 8 bits mode programming is possible if you use 2 x PCF8574T.  
.................... //              RW Pin is not being used.  
.................... //  
.................... // As defined in the following structure the pin connection is as follows:  
.................... //  
.................... //  PCF8574P     LCD  
.................... //  ========     ======  
.................... //     P0        RS  
.................... //     P1        RW    (Not used!)  
.................... //     P2        Enable   
.................... //     P3        Led Backlight  
.................... //     P4        D4  
.................... //     P5        D5  
.................... //     P6        D6  
.................... //     P7        D7  
.................... //  
.................... //  The SCL and SDA pins should be pull-up resistor as shown below:  
.................... //  
.................... //             +5v  
.................... //               |  
.................... //               <  
.................... //               > 4.7K         
.................... //               <           
.................... //To PIC         |          To i2c slave  
.................... //pin xx ------------------ SDA pin   
.................... //(SDA)                       
.................... //              +5v  
.................... //               |  
.................... //               <  
.................... //               > 4.7K         
.................... //               <           
.................... //To PIC         |          To i2c slave  
.................... //pin xx ------------------ SCL pin   
.................... //(SCL)  
.................... //  
.................... //To PIC                    To i2c slave  
.................... //Vss pin ----------------- Vss or ground pin   
.................... //                |  
.................... //              -----  
.................... //               ---  Ground  
.................... //                -   
.................... //   
.................... // THIS DOCUMENT IS PROVIDED TO THE USER "AS IS"  
.................... //-----------------------------------------------------------------------------  
.................... byte LCD_ADDR ;//             0x4E        //I2C slave address for LCD module  
.................... byte lcd_total_rows ;//       2           //Number of rows: 1,2,3 or 4  
.................... byte lcd_total_columns ;//    16          //Number of columns: 1...20    
....................  
.................... #define RS                    0b00000001  //P0 - PCF8574T Pin connected to RS  
.................... #define RW                    0b00000010  //P1 - PCF8574T Pin connected to RW  
.................... #define ENABLE                0b00000100  //P2 - PCF8574T Pin connected to EN  
.................... #define LCD_BACKLIGHT         0b00001000  //P3 - PCF8574T Pin connected to BACKLIGHT LED  
....................  
.................... #define addr_row_one          0x00        //LCD RAM address for row 1  
.................... #define addr_row_two          0x40        //LCD RAM address for row 2  
.................... #define addr_row_three        0x14        //LCD RAM address for row 3  
.................... #define addr_row_four         0x54        //LCD RAM address for row 4  
....................  
.................... #define ON                    1  
.................... #define OFF                   0  
.................... #define NOT                   ~  
.................... #define data_shifted          data<<4  
.................... int8 new_row_request=1, BACKLIGHT_LED=LCD_BACKLIGHT;  
....................  
.................... void lcd_backlight_led(byte bl)  
.................... {   
....................       If (bl) BACKLIGHT_LED=LCD_BACKLIGHT; else BACKLIGHT_LED=OFF;  
*
01B5:  MOVF   28,F
01B6:  BTFSC  03.2
01B7:  GOTO   1BB
01B8:  MOVLW  08
01B9:  MOVWF  25
01BA:  GOTO   1BC
01BB:  CLRF   25
01BC:  BCF    0A.3
01BD:  BCF    0A.4
01BE:  GOTO   2FF (RETURN)
.................... }  
....................  
.................... void i2c_send_nibble(byte data, byte type)  
.................... {     
....................    switch (type)  
*
0085:  MOVF   3A,W
0086:  XORLW  00
0087:  BTFSC  03.2
0088:  GOTO   08D
0089:  XORLW  01
008A:  BTFSC  03.2
008B:  GOTO   0B2
008C:  GOTO   0D8
....................    {       
....................       case 0 :       
....................       i2c_write(data_shifted | BACKLIGHT_LED);  
008D:  SWAPF  39,W
008E:  MOVWF  77
008F:  MOVLW  F0
0090:  ANDWF  77,F
0091:  MOVF   77,W
0092:  IORWF  25,W
0093:  MOVWF  3B
0094:  MOVWF  3C
0095:  CALL   029
....................       delay_cycles(1);  
0096:  NOP
....................       i2c_write(data_shifted | ENABLE | BACKLIGHT_LED );  
0097:  SWAPF  39,W
0098:  MOVWF  77
0099:  MOVLW  F0
009A:  ANDWF  77,F
009B:  MOVF   77,W
009C:  IORLW  04
009D:  IORWF  25,W
009E:  MOVWF  3B
009F:  MOVWF  3C
00A0:  CALL   029
....................       delay_us(2);  
00A1:  MOVLW  02
00A2:  MOVWF  77
00A3:  DECFSZ 77,F
00A4:  GOTO   0A3
00A5:  GOTO   0A6
00A6:  NOP
....................       i2c_write(data_shifted & NOT ENABLE | BACKLIGHT_LED);  
00A7:  SWAPF  39,W
00A8:  MOVWF  77
00A9:  MOVLW  F0
00AA:  ANDWF  77,F
00AB:  MOVF   77,W
00AC:  ANDLW  FB
00AD:  IORWF  25,W
00AE:  MOVWF  3B
00AF:  MOVWF  3C
00B0:  CALL   029
....................       break;  
00B1:  GOTO   0D8
....................        
....................       case 1 :  
....................       i2c_write(data_shifted | RS | BACKLIGHT_LED);  
00B2:  SWAPF  39,W
00B3:  MOVWF  77
00B4:  MOVLW  F0
00B5:  ANDWF  77,F
00B6:  MOVF   77,W
00B7:  IORLW  01
00B8:  IORWF  25,W
00B9:  MOVWF  3B
00BA:  MOVWF  3C
00BB:  CALL   029
....................       delay_cycles(1);  
00BC:  NOP
....................       i2c_write(data_shifted | RS | ENABLE | BACKLIGHT_LED );  
00BD:  SWAPF  39,W
00BE:  MOVWF  77
00BF:  MOVLW  F0
00C0:  ANDWF  77,F
00C1:  MOVF   77,W
00C2:  IORLW  01
00C3:  IORLW  04
00C4:  IORWF  25,W
00C5:  MOVWF  3B
00C6:  MOVWF  3C
00C7:  CALL   029
....................       delay_us(2);  
00C8:  MOVLW  02
00C9:  MOVWF  77
00CA:  DECFSZ 77,F
00CB:  GOTO   0CA
00CC:  GOTO   0CD
00CD:  NOP
....................       i2c_write(data_shifted | RS | BACKLIGHT_LED);  
00CE:  SWAPF  39,W
00CF:  MOVWF  77
00D0:  MOVLW  F0
00D1:  ANDWF  77,F
00D2:  MOVF   77,W
00D3:  IORLW  01
00D4:  IORWF  25,W
00D5:  MOVWF  3B
00D6:  MOVWF  3C
00D7:  CALL   029
....................       break;  
....................    }  
00D8:  RETURN
.................... }  
....................      
.................... void lcd_send_byte(byte data, byte type)  
....................    {  
....................         i2c_start();  
00D9:  BSF    20.4
00DA:  MOVF   20,W
00DB:  BSF    03.5
00DC:  MOVWF  07
00DD:  MOVLW  04
00DE:  MOVWF  77
00DF:  DECFSZ 77,F
00E0:  GOTO   0DF
00E1:  BCF    03.5
00E2:  BSF    20.3
00E3:  MOVF   20,W
00E4:  BSF    03.5
00E5:  MOVWF  07
00E6:  MOVLW  03
00E7:  MOVWF  77
00E8:  DECFSZ 77,F
00E9:  GOTO   0E8
00EA:  BCF    03.5
00EB:  BCF    07.4
00EC:  BCF    20.4
00ED:  MOVF   20,W
00EE:  BSF    03.5
00EF:  MOVWF  07
00F0:  MOVLW  04
00F1:  MOVWF  77
00F2:  DECFSZ 77,F
00F3:  GOTO   0F2
00F4:  BCF    03.5
00F5:  BCF    07.3
00F6:  BCF    20.3
00F7:  MOVF   20,W
00F8:  BSF    03.5
00F9:  MOVWF  07
....................         i2c_write(LCD_ADDR);  
00FA:  BCF    03.5
00FB:  MOVF   21,W
00FC:  MOVWF  3C
00FD:  CALL   029
....................         i2c_send_nibble(data >> 4 , type);  
00FE:  SWAPF  36,W
00FF:  MOVWF  38
0100:  MOVLW  0F
0101:  ANDWF  38,F
0102:  MOVF   38,W
0103:  MOVWF  39
0104:  MOVF   37,W
0105:  MOVWF  3A
0106:  CALL   085
....................         i2c_send_nibble(data & 0xf , type);  
0107:  MOVF   36,W
0108:  ANDLW  0F
0109:  MOVWF  38
010A:  MOVWF  39
010B:  MOVF   37,W
010C:  MOVWF  3A
010D:  CALL   085
....................         i2c_stop();         
010E:  BCF    20.4
010F:  MOVF   20,W
0110:  BSF    03.5
0111:  MOVWF  07
0112:  NOP
0113:  BCF    03.5
0114:  BSF    20.3
0115:  MOVF   20,W
0116:  BSF    03.5
0117:  MOVWF  07
0118:  BCF    03.5
0119:  BTFSS  07.3
011A:  GOTO   119
011B:  MOVLW  04
011C:  MOVWF  77
011D:  DECFSZ 77,F
011E:  GOTO   11D
011F:  GOTO   120
0120:  NOP
0121:  BSF    20.4
0122:  MOVF   20,W
0123:  BSF    03.5
0124:  MOVWF  07
0125:  MOVLW  04
0126:  MOVWF  77
0127:  DECFSZ 77,F
0128:  GOTO   127
0129:  BCF    03.5
012A:  RETURN
....................    }  
....................  
.................... void lcd_clear()  
.................... {   
....................         lcd_send_byte(0x01,0);  
012B:  MOVLW  01
012C:  MOVWF  36
012D:  CLRF   37
012E:  CALL   0D9
....................         delay_ms(2);  
012F:  MOVLW  02
0130:  MOVWF  2F
0131:  CALL   015
....................         new_row_request=1;  
0132:  MOVLW  01
0133:  MOVWF  24
0134:  RETURN
.................... }  
....................  
.................... void lcd_init(byte ADDR, byte col, byte row)  
.................... {  
....................    byte i; 
....................    byte CONST lcd_type=2;  // 0=5x7, 1=5x10, 2=2 lines  
....................    byte CONST LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; // These bytes need to be sent to the LCD to start it up. 
....................     
....................    LCD_ADDR =ADDR;//             0x4E        //I2C slave address for LCD module  
0135:  MOVF   28,W
0136:  MOVWF  21
....................    lcd_total_rows =row;//       2           //Number of rows: 1,2,3 or 4  
0137:  MOVF   2A,W
0138:  MOVWF  22
....................    lcd_total_columns= col ; 
0139:  MOVF   29,W
013A:  MOVWF  23
....................    disable_interrupts(GLOBAL);  
013B:  BCF    0B.6
013C:  BCF    0B.7
013D:  BTFSC  0B.7
013E:  GOTO   13C
....................    delay_ms(50); //LCD power up delay  
013F:  MOVLW  32
0140:  MOVWF  2F
0141:  CALL   015
....................      
....................    i2c_start();  
0142:  BSF    20.4
0143:  MOVF   20,W
0144:  BSF    03.5
0145:  MOVWF  07
0146:  MOVLW  04
0147:  MOVWF  77
0148:  DECFSZ 77,F
0149:  GOTO   148
014A:  BCF    03.5
014B:  BSF    20.3
014C:  MOVF   20,W
014D:  BSF    03.5
014E:  MOVWF  07
014F:  MOVLW  03
0150:  MOVWF  77
0151:  DECFSZ 77,F
0152:  GOTO   151
0153:  BCF    03.5
0154:  BCF    07.4
0155:  BCF    20.4
0156:  MOVF   20,W
0157:  BSF    03.5
0158:  MOVWF  07
0159:  MOVLW  04
015A:  MOVWF  77
015B:  DECFSZ 77,F
015C:  GOTO   15B
015D:  BCF    03.5
015E:  BCF    07.3
015F:  BCF    20.3
0160:  MOVF   20,W
0161:  BSF    03.5
0162:  MOVWF  07
....................    i2c_write(LCD_ADDR);  
0163:  BCF    03.5
0164:  MOVF   21,W
0165:  MOVWF  3C
0166:  CALL   029
....................       i2c_send_nibble(0x00,0);  
0167:  CLRF   39
0168:  CLRF   3A
0169:  CALL   085
....................       delay_ms(15);  
016A:  MOVLW  0F
016B:  MOVWF  2F
016C:  CALL   015
....................      
....................    for (i=1;i<=3;++i)     
016D:  MOVLW  01
016E:  MOVWF  2B
016F:  MOVF   2B,W
0170:  SUBLW  03
0171:  BTFSS  03.0
0172:  GOTO   17C
....................    {  
....................       i2c_send_nibble(0x03,0);  
0173:  MOVLW  03
0174:  MOVWF  39
0175:  CLRF   3A
0176:  CALL   085
....................       delay_ms(5);  
0177:  MOVLW  05
0178:  MOVWF  2F
0179:  CALL   015
017A:  INCF   2B,F
017B:  GOTO   16F
....................    }     
....................       i2c_send_nibble(0x02,0);  
017C:  MOVLW  02
017D:  MOVWF  39
017E:  CLRF   3A
017F:  CALL   085
....................       delay_ms(5);  
0180:  MOVLW  05
0181:  MOVWF  2F
0182:  CALL   015
....................    i2c_stop();  
0183:  BCF    20.4
0184:  MOVF   20,W
0185:  BSF    03.5
0186:  MOVWF  07
0187:  NOP
0188:  BCF    03.5
0189:  BSF    20.3
018A:  MOVF   20,W
018B:  BSF    03.5
018C:  MOVWF  07
018D:  BCF    03.5
018E:  BTFSS  07.3
018F:  GOTO   18E
0190:  MOVLW  04
0191:  MOVWF  77
0192:  DECFSZ 77,F
0193:  GOTO   192
0194:  GOTO   195
0195:  NOP
0196:  BSF    20.4
0197:  MOVF   20,W
0198:  BSF    03.5
0199:  MOVWF  07
019A:  MOVLW  04
019B:  MOVWF  77
019C:  DECFSZ 77,F
019D:  GOTO   19C
....................      
....................    for (i=0;i<=3;++i) {  
019E:  BCF    03.5
019F:  CLRF   2B
01A0:  MOVF   2B,W
01A1:  SUBLW  03
01A2:  BTFSS  03.0
01A3:  GOTO   1AF
....................    lcd_send_byte(LCD_INIT_STRING[i],0);  
01A4:  MOVF   2B,W
01A5:  CALL   004
01A6:  MOVWF  2C
01A7:  MOVWF  36
01A8:  CLRF   37
01A9:  CALL   0D9
....................    delay_ms(5);  
01AA:  MOVLW  05
01AB:  MOVWF  2F
01AC:  CALL   015
01AD:  INCF   2B,F
01AE:  GOTO   1A0
....................    }  
....................    lcd_clear();  //Clear Display  
01AF:  CALL   12B
....................    enable_interrupts(GLOBAL);  
01B0:  MOVLW  C0
01B1:  IORWF  0B,F
01B2:  BCF    0A.3
01B3:  BCF    0A.4
01B4:  GOTO   2FC (RETURN)
.................... }  
....................  
.................... void lcd_gotoxy( byte x, byte y)  
.................... {  
.................... byte row,column,row_addr,lcd_address;  
.................... static char data;  
*
02F3:  BCF    03.5
02F4:  CLRF   26
....................  
....................    if (y>lcd_total_rows) row=lcd_total_rows; else row=y;  
*
01BF:  MOVF   30,W
01C0:  SUBWF  22,W
01C1:  BTFSC  03.0
01C2:  GOTO   1C6
01C3:  MOVF   22,W
01C4:  MOVWF  31
01C5:  GOTO   1C8
01C6:  MOVF   30,W
01C7:  MOVWF  31
....................    
....................    switch(row)  
01C8:  MOVF   31,W
01C9:  XORLW  01
01CA:  BTFSC  03.2
01CB:  GOTO   1D6
01CC:  XORLW  03
01CD:  BTFSC  03.2
01CE:  GOTO   1D8
01CF:  XORLW  01
01D0:  BTFSC  03.2
01D1:  GOTO   1DB
01D2:  XORLW  07
01D3:  BTFSC  03.2
01D4:  GOTO   1DE
01D5:  GOTO   1E1
....................    {  
....................       case 1:  row_addr=addr_row_one;     break;  
01D6:  CLRF   33
01D7:  GOTO   1E2
....................       case 2:  row_addr=addr_row_two;     break;  
01D8:  MOVLW  40
01D9:  MOVWF  33
01DA:  GOTO   1E2
....................       case 3:  row_addr=addr_row_three;   break;  
01DB:  MOVLW  14
01DC:  MOVWF  33
01DD:  GOTO   1E2
....................       case 4:  row_addr=addr_row_four;    break;  
01DE:  MOVLW  54
01DF:  MOVWF  33
01E0:  GOTO   1E2
....................       default: row_addr=addr_row_one;     break;   
01E1:  CLRF   33
....................    }   
....................      
....................    if (x>lcd_total_columns) column=lcd_total_columns; else column=x;   
01E2:  MOVF   2F,W
01E3:  SUBWF  23,W
01E4:  BTFSC  03.0
01E5:  GOTO   1E9
01E6:  MOVF   23,W
01E7:  MOVWF  32
01E8:  GOTO   1EB
01E9:  MOVF   2F,W
01EA:  MOVWF  32
....................    lcd_address=(row_addr+(column-1));  
01EB:  MOVLW  01
01EC:  SUBWF  32,W
01ED:  ADDWF  33,W
01EE:  MOVWF  34
....................    lcd_send_byte(0x80|lcd_address,0);  
01EF:  MOVF   34,W
01F0:  IORLW  80
01F1:  MOVWF  35
01F2:  MOVWF  36
01F3:  CLRF   37
01F4:  CALL   0D9
01F5:  RETURN
.................... }  
....................  
.................... //Display the character on LCD screen.  
.................... void LCD_PUTC(char in_data)  
.................... {     
....................   switch(in_data)  
01F6:  MOVF   2E,W
01F7:  XORLW  0C
01F8:  BTFSC  03.2
01F9:  GOTO   201
01FA:  XORLW  06
01FB:  BTFSC  03.2
01FC:  GOTO   203
01FD:  XORLW  02
01FE:  BTFSC  03.2
01FF:  GOTO   210
0200:  GOTO   215
....................    {   
....................      case '\f': lcd_clear();                       break;                 
0201:  CALL   12B
0202:  GOTO   21A
....................        
....................      case '\n':  
....................      new_row_request++;  
0203:  INCF   24,F
....................      if (new_row_request>lcd_total_rows) new_row_request=1;  
0204:  MOVF   24,W
0205:  SUBWF  22,W
0206:  BTFSC  03.0
0207:  GOTO   20A
0208:  MOVLW  01
0209:  MOVWF  24
....................      lcd_gotoxy(1, new_row_request);  
020A:  MOVLW  01
020B:  MOVWF  2F
020C:  MOVF   24,W
020D:  MOVWF  30
020E:  CALL   1BF
....................      break;  
020F:  GOTO   21A
....................                    
....................      case '\b': lcd_send_byte(0x10,0);             break;  
0210:  MOVLW  10
0211:  MOVWF  36
0212:  CLRF   37
0213:  CALL   0D9
0214:  GOTO   21A
....................          
....................      default: lcd_send_byte(in_data,1);            break;       
0215:  MOVF   2E,W
0216:  MOVWF  36
0217:  MOVLW  01
0218:  MOVWF  37
0219:  CALL   0D9
....................        
....................    }  
021A:  RETURN
.................... }  
....................  
....................  
.................... int bien = 0; 
....................  
.................... void main() 
*
02E1:  MOVF   03,W
02E2:  ANDLW  1F
02E3:  MOVWF  03
02E4:  MOVLW  FF
02E5:  MOVWF  20
02E6:  MOVLW  01
02E7:  MOVWF  24
02E8:  MOVLW  08
02E9:  MOVWF  25
02EA:  CLRF   27
02EB:  BSF    03.5
02EC:  BSF    1F.0
02ED:  BSF    1F.1
02EE:  BSF    1F.2
02EF:  BCF    1F.3
02F0:  MOVLW  07
02F1:  MOVWF  1C
02F2:  BCF    03.7
.................... { 
....................    lcd_init(0x4E,16,2);  //khoi dong lcd dia chi 0x4E 
*
02F5:  MOVLW  4E
02F6:  MOVWF  28
02F7:  MOVLW  10
02F8:  MOVWF  29
02F9:  MOVLW  02
02FA:  MOVWF  2A
02FB:  GOTO   135
....................    lcd_backlight_led(ON); //bat led nen lcd 
02FC:  MOVLW  01
02FD:  MOVWF  28
02FE:  GOTO   1B5
....................    set_tris_B(0x00); 
02FF:  MOVLW  00
0300:  BSF    03.5
0301:  MOVWF  06
....................    while(TRUE) 
....................    { 
....................       lcd_gotoxy(1, 1); 
0302:  MOVLW  01
0303:  BCF    03.5
0304:  MOVWF  2F
0305:  MOVWF  30
0306:  CALL   1BF
....................       printf(lcd_putc, "NGUYEN MINH KHOA"); 
0307:  MOVLW  0C
0308:  BSF    03.6
0309:  MOVWF  0D
030A:  MOVLW  00
030B:  MOVWF  0F
030C:  BCF    03.6
030D:  GOTO   21B
....................       lcd_gotoxy(1, 2); 
030E:  MOVLW  01
030F:  MOVWF  2F
0310:  MOVLW  02
0311:  MOVWF  30
0312:  CALL   1BF
....................       printf(lcd_putc, "%d", bien); 
0313:  MOVF   27,W
0314:  MOVWF  28
0315:  MOVLW  18
0316:  MOVWF  29
0317:  GOTO   288
....................       bien++; 
0318:  INCF   27,F
....................       delay_ms(1000); 
0319:  MOVLW  04
031A:  MOVWF  28
031B:  MOVLW  FA
031C:  MOVWF  2F
031D:  CALL   015
031E:  DECFSZ 28,F
031F:  GOTO   31B
0320:  BSF    03.5
0321:  GOTO   302
....................    } 
.................... } 
0322:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
